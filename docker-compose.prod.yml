services:
  db:
    image: postgres:latest 
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST_AUTH_METHOD=${POSTGRES_HOST_AUTH_METHOD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest

  work:
    image: ${DOCKER_IMAGE_WORKER}
    build: 
      context: ./back-end
      dockerfile: Dockerfile.worker
    command: celery -A controllers.celery_controller.celery_config.celery worker --loglevel=DEBUG
    environment: 
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_TOKEN_LOCATION=${JWT_TOKEN_LOCATION}
      - JWT_ACCESS_COOKIE_NAME=${JWT_ACCESS_COOKIE_NAME}
      - MAIL_SERVER=${MAIL_SERVER}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USE_TLS=${MAIL_USE_TLS}
      - MAIL_USE_SSL=${MAIL_USE_SSL}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
    volumes:
      - ./back-end:/app
    depends_on:
      - redis
  
  backend:
    image: ${DOCKER_IMAGE_BACKEND}
    build:
      context: ./back-end
      dockerfile: Dockerfile.backend
    command: python3 routes.py
    environment: 
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_TOKEN_LOCATION=${JWT_TOKEN_LOCATION}
      - JWT_ACCESS_COOKIE_NAME=${JWT_ACCESS_COOKIE_NAME}
      - MAIL_SERVER=${MAIL_SERVER}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USE_TLS=${MAIL_USE_TLS}
      - MAIL_USE_SSL=${MAIL_USE_SSL}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_DEFAULT_SENDER=${MAIL_DEFAULT_SENDER}
      - DEVELOP_BACKEND_PORT=${DEVELOP_BACKEND_PORT}
    volumes:
      - ./back-end:/app
    depends_on:
      - db
      - redis
    expose:
      - ${DEVELOP_BACKEND_PORT}

  frontend:
    image: ${DOCKER_IMAGE_FRONTEND}
    build: ./front-end
    volumes:
      - ./front-end:/app
    depends_on:
      - backend
    expose:
      - ${DEVELOP_FRONTEND_PORT}


  nginx:
    image: ${DOCKER_IMAGE_NGINX}
    build:
      context: ./
      dockerfile: Dockerfile.nginx
    container_name: nginx-proxy
    environment:
      - SSL_PASSWORD_FILE=/ssl/${SSL_PASSPHRASE_FILE}
    ports:
      - "${NGINX_HTTP_PORT}:80"
      - "${NGINX_HTTPS_PORT}:443"
    volumes:
      - ${NGINX_CONF_PROD}:/etc/nginx/conf.d/default.conf
      - ${SSL_PATH}/${SSL_CERT}:/etc/nginx/ssl/${SSL_CERT}
      - ${SSL_PATH}/${SSL_KEY}:/etc/nginx/ssl/${SSL_KEY}
      - ${SSL_PATH}/${SSL_PASSPHRASE_FILE}:/ssl/${SSL_PASSPHRASE_FILE}
    depends_on:
      - backend
      - frontend

