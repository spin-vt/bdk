version: '3.8'
services:
  pgadmin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=${POSTGRES_ADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${POSTGRES_ADMIN_PASSWORD}
    ports:
      - 8080:80
    depends_on:
      - db

  db:
    image: postgres:latest
    volumes:
      - ./postgres-init-scripts:/docker-entrypoint-initdb.d/
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST_AUTH_METHOD=${POSTGRES_HOST_AUTH_METHOD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest

  worker:
    image: worker
    build: 
      context: ./back-end
      dockerfile: Dockerfile.worker
    command: celery -A controllers.celery_controller.celery_config.celery worker --loglevel=DEBUG
    environment: 
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_TOKEN_LOCATION=${JWT_TOKEN_LOCATION}
      - JWT_ACCESS_COOKIE_NAME=${JWT_ACCESS_COOKIE_NAME}
    volumes:
      - ./back-end:/app
    depends_on:
      - redis
  
  backend:
    image: backend
    build:
      context: ./back-end
      dockerfile: Dockerfile.backend
    command: python3 routes.py
    environment: 
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_TOKEN_LOCATION=${JWT_TOKEN_LOCATION}
      - JWT_ACCESS_COOKIE_NAME=${JWT_ACCESS_COOKIE_NAME}
    volumes:
      - ./back-end:/app
    depends_on:
      - db
      - redis
    expose:
      - 5000

  frontend:
    image: frontend
    build: ./front-end
    volumes:
      - ./front-end:/app
    depends_on:
      - backend
    expose:
      - 3000

  nginx:
    image: nginx:latest
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend
      - frontend
